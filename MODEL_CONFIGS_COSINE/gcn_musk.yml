# Telegram Bot
#telegram_config_file: telegram_config.yml

# Dataset and Splits
data_root: DATA
dataset_class: dataset.Musk
dataset_name:  musk
data_splits_file:  DATA_SPLITS/musk/musk_outer10_inner1.splits


# Hardware
device:  cpu
max_cpus:  24
max_gpus: 4
gpus_per_task:  0.25


# Data Loading
dataset_getter: pydgn.data.provider.SingleGraphDataProvider
data_loader:
  class_name: torch_geometric.loader.DataLoader
  args:
    num_workers : 0
    pin_memory: False


# Reproducibility
seed: 42


# Experiment
result_folder: RESULTS_COSINE
exp_name: gcn
experiment: pydgn.experiment.supervised_task.SupervisedTask
higher_results_are_better: True
evaluate_every: 1
final_training_runs: 3


grid:
  supervised_config:
    model: model.GCN
    checkpoint: False
    shuffle: True
    batch_size: 1  # we use the full table (with no graph) in one shot
    epochs: 5000

    # Model specific arguments #
    cosine: true

    hidden_units:
      - 32
      - 64
      - 128

    num_layers:
      - 1
      - 2
      - 3

    k:
      - 1
      - 3
      - 5
      - 10

#    dropout:
#      - 0
#
#    aggregation:
#      - add
#      - mean

    # ------------------------ #

    # Optimizer (with an example - 3 possible alternatives)
    optimizer:
      - class_name: pydgn.training.callback.optimizer.Optimizer
        args:
          optimizer_class_name: torch.optim.Adam
          lr:
            - 0.01
            - 0.001
          weight_decay: 0.

    # Scheduler (optional)
    scheduler: null

    # Loss metric (with an example of Additive Loss)
    loss: metric.MulticlassClassification

    # Score metric
    scorer:
      - class_name: pydgn.training.callback.metric.MultiScore
        args:
          main_scorer: metric.MicroF1Score
          my_second_metric: metric.MulticlassAccuracy

    # Readout (optional)
    readout: null

    # Training engine
    engine: pydgn.training.engine.TrainingEngine

    # Gradient clipper (optional)
    gradient_clipper: null

    # Early stopper (optional, with an example of "patience" early stopping on the validation score)
    early_stopper:
      - class_name:
          - pydgn.training.callback.early_stopping.PatienceEarlyStopper
        args:
          patience:
            - 1000
          # SYNTAX: (train_,validation_)[name_of_the_scorer_or_loss_to_monitor] -> we can use MAIN_LOSS or MAIN_SCORE
          monitor: validation_main_score
          mode: max  # is best the `max` or the `min` value we are monitoring?
          checkpoint: False  # store the best checkpoint

    # Plotter of metrics
    plotter: null